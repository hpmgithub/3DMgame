package com.jash.dmgame.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.jash.dmgame.entities.ChapterEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_ENTITY".
*/
public class ChapterEntityDao extends AbstractDao<ChapterEntity, Long> {

    public static final String TABLENAME = "CHAPTER_ENTITY";

    /**
     * Properties of entity ChapterEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Pic = new Property(2, String.class, "pic", false, "PIC");
        public final static Property Feedback = new Property(3, Integer.class, "feedback", false, "FEEDBACK");
        public final static Property Body = new Property(4, String.class, "body", false, "BODY");
        public final static Property SendDate = new Property(5, java.util.Date.class, "sendDate", false, "SEND_DATE");
        public final static Property TypeId = new Property(6, long.class, "typeId", false, "TYPE_ID");
    };


    public ChapterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_ENTITY\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"PIC\" TEXT," + // 2: pic
                "\"FEEDBACK\" INTEGER," + // 3: feedback
                "\"BODY\" TEXT," + // 4: body
                "\"SEND_DATE\" INTEGER," + // 5: sendDate
                "\"TYPE_ID\" INTEGER NOT NULL );"); // 6: typeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChapterEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(3, pic);
        }
 
        Integer feedback = entity.getFeedback();
        if (feedback != null) {
            stmt.bindLong(4, feedback);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(5, body);
        }
 
        java.util.Date sendDate = entity.getSendDate();
        if (sendDate != null) {
            stmt.bindLong(6, sendDate.getTime());
        }
        stmt.bindLong(7, entity.getTypeId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChapterEntity readEntity(Cursor cursor, int offset) {
        ChapterEntity entity = new ChapterEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // pic
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // feedback
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // body
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // sendDate
            cursor.getLong(offset + 6) // typeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChapterEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFeedback(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBody(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSendDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setTypeId(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChapterEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChapterEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
